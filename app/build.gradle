import static org.gradle.internal.os.OperatingSystem.current

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.5.1/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'org.bytedeco.gradle-javacpp-platform' version '1.5.8'
    id 'org.beryx.runtime' version '1.12.7'
}

def platform = current().isWindows() ? 'win' : current().isLinux() ? 'linux' : 'mac'

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

runtime {
    jpackage {
        skipInstaller = true
    }
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'

    implementation group: 'org.openjfx', name: 'javafx-base', version: '17.0.1', classifier: platform
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: '17.0.1', classifier: platform
    implementation group: 'org.openjfx', name: 'javafx-controls', version: '17.0.1', classifier: platform
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: '17.0.1', classifier: platform
    implementation group: 'org.openjfx', name: 'javafx-web', version: '17.0.1', classifier: platform
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:31.0.1-jre'
}

application {
    // Define the main class for the application.
    mainClass = 'aplikacja2023.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
